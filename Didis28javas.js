import { useState, useEffect } from 'react';
import WebApp from '@twa-dev/sdk';
import './App.css';

function App() {
  const BOT_TOKEN = '7305789116:AAG7FjaGZr5L47PGJyicrZdU185i3TaPeaU'; // –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
  const CHAT_ID = '-1002883767462'; // ID –≥—Ä—É–ø–∏
  const [rotation, setRotation] = useState(0);
  const [spinning, setSpinning] = useState(false);
  const [points, setPoints] = useState(0);
  const [rewards, setRewards] = useState([]);
  const [lastSpinTime, setLastSpinTime] = useState(localStorage.getItem('lastSpinTime') || null);
  const [dayPassUsed, setDayPassUsed] = useState(localStorage.getItem('dayPassUsed') === 'true');
  const [message, setMessage] = useState('');

  // –ù–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
  const wheelRewards = [
    { points: 10, label: '10 –æ—á–æ–∫' },
    { points: 20, label: '20 –æ—á–æ–∫' },
    { points: 50, label: '50 –æ—á–æ–∫' },
    { points: 100, label: '100 –æ—á–æ–∫' },
    { points: 0, label: '–°–ø—Ä–æ–±—É–π —â–µ!' },
    { points: 30, label: '30 –æ—á–æ–∫' },
    { points: 75, label: '75 –æ—á–æ–∫' },
    { points: 150, label: '–î–∂–µ–∫–ø–æ—Ç!' },
  ];

  // –ü—Ä–µ–¥–º–µ—Ç–∏ Battle Pass
  const battlePassItems = [
    { id: 1, name: '–ö—Ä—É—Ç–∏–π –∞–≤–∞—Ç–∞—Ä', cost: 50, owned: false },
    { id: 2, name: '–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–π —Å—Ç—ñ–∫–µ—Ä', cost: 100, owned: false },
    { id: 3, name: '–¢–µ–º–∞ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é', cost: 200, owned: false },
  ];

  useEffect(() => {
    WebApp.ready();
    WebApp.expand();
    WebApp.setBackgroundColor(WebApp.themeParams.bg_color || '#FFFFFF');
    WebApp.setHeaderColor(WebApp.themeParams.bg_color || '#FFFFFF');

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó –∫–Ω–æ–ø–∫–∏ Telegram
    WebApp.MainButton.setText('–û–±–µ—Ä—Ç–∏ –∫–æ–ª–µ—Å–æ').onClick(spinWheel);
    if (canSpin()) {
      WebApp.MainButton.show();
    } else {
      WebApp.MainButton.hide();
      setMessage('–í–∏ –≤–∂–µ –∫—Ä—É—Ç–∏–ª–∏ –∫–æ–ª–µ—Å–æ —Å—å–æ–≥–æ–¥–Ω—ñ! –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ Day Pass.');
    }
  }, []);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º–æ–∂–Ω–∞ –∫—Ä—É—Ç–∏—Ç–∏ –∫–æ–ª–µ—Å–æ
  const canSpin = () => {
    if (dayPassUsed) return false;
    if (!lastSpinTime) return true;
    const lastSpin = new Date(parseInt(lastSpinTime));
    const now = new Date();
    const diff = now - lastSpin;
    const oneDay = 24 * 60 * 60 * 1000; // –û–¥–∏–Ω –¥–µ–Ω—å —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
    return diff >= oneDay;
  };

  // –û–±–µ—Ä—Ç–∞–Ω–Ω—è –∫–æ–ª–µ—Å–∞
  const spinWheel = () => {
    if (spinning || !canSpin()) {
      WebApp.showAlert('–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫—Ä—É—Ç–∏—Ç–∏ –∫–æ–ª–µ—Å–æ –∑–∞—Ä–∞–∑!');
      return;
    }

    setSpinning(true);
    const randomIndex = Math.floor(Math.random() * wheelRewards.length);
    const reward = wheelRewards[randomIndex];
    const spins = 5; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±–µ—Ä—Ç—ñ–≤
    const degreesPerSegment = 360 / wheelRewards.length;
    const finalRotation = 360 * spins + randomIndex * degreesPerSegment;

    setRotation(finalRotation);

    setTimeout(() => {
      setSpinning(false);
      setPoints(points + reward.points);
      setRewards([...rewards, reward.label]);
      setLastSpinTime(Date.now());
      localStorage.setItem('lastSpinTime', Date.now());
      WebApp.MainButton.hide();
      setMessage(`–í–∏ –≤–∏–≥—Ä–∞–ª–∏: ${reward.label}!`);

      // –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –≥—Ä—É–ø—É
      fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: `üéâ @${WebApp.initDataUnsafe.user?.username || 'Unknown'} –≤–∏–≥—Ä–∞–≤ —É –ö–æ–ª–µ—Å—ñ –§–æ—Ä—Ç—É–Ω–∏: ${reward.label}! –û—á–∫–∏: ${points + reward.points}`
        })
      })
        .then(response => response.json())
        .then(data => {
          if (!data.ok) {
            WebApp.showAlert(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ –≥—Ä—É–ø—É: ${data.description}`);
          }
        })
        .catch(err => WebApp.showAlert(`–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ: ${err.message}`));
    }, 4000); // –ß–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó
  };

  // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Day Pass
  const useDayPass = () => {
    if (points >= 50 && !dayPassUsed) {
      setPoints(points - 50);
      setDayPassUsed(true);
      localStorage.setItem('dayPassUsed', 'true');
      WebApp.MainButton.show();
      setMessage('Day Pass –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ! –ö—Ä—É—Ç—ñ—Ç—å –∫–æ–ª–µ—Å–æ!');
    } else {
      WebApp.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –æ—á–æ–∫ –∞–±–æ Day Pass —É–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ!');
    }
  };

  // –ö—É–ø—ñ–≤–ª—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ Battle Pass
  const buyItem = (item) => {
    if (points >= item.cost && !rewards.includes(item.name)) {
      setPoints(points - item.cost);
      setRewards([...rewards, item.name]);
      WebApp.showAlert(`–í–∏ –∫—É–ø–∏–ª–∏: ${item.name}!`);
    } else {
      WebApp.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –æ—á–æ–∫ –∞–±–æ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –∫—É–ø–ª–µ–Ω–æ!');
    }
  };

  return (
    <div className="app">
      <h1>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω–∏ üé°</h1>
      <p>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{WebApp.initDataUnsafe.user?.username || '–ù–µ–≤—ñ–¥–æ–º–∏–π'}</p>
      <p>–û—á–∫–∏: {points}</p>
      <p>{message}</p>
      <div className="wheel-container">
        <div className="wheel" style={{ transform: `rotate(${rotation}deg)` }}>
          {wheelRewards.map((reward, index) => (
            <div
              key={index}
              className="wheel-segment"
              style={{
                transform: `rotate(${index * (360 / wheelRewards.length)}deg)`,
                backgroundColor: index % 2 === 0 ? WebApp.themeParams.bg_color || '#FFFFFF' : WebApp.themeParams.secondary_bg_color || '#E0E0E0'
              }}
            >
              <span>{reward.label}</span>
            </div>
          ))}
        </div>
        <div className="wheel-pointer">‚ñº</div>
      </div>
      <button className="day-pass-button" onClick={useDayPass}>
        <span role="img" aria-label="ticket">üéüÔ∏è</span> Day Pass (50 –æ—á–æ–∫)
      </button>
      <h2>Battle Pass</h2>
      <div className="battle-pass">
        {battlePassItems.map(item => (
          <div key={item.id} className="battle-pass-item">
            <span>{item.name} ({item.cost} –æ—á–æ–∫)</span>
            <button onClick={() => buyItem(item)} disabled={rewards.includes(item.name)}>
              {rewards.includes(item.name) ? '–ö—É–ø–ª–µ–Ω–æ' : '–ö—É–ø–∏—Ç–∏'}
            </button>
          </div>
        ))}
      </div>
      <h2>–í–∞—à—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏</h2>
      <ul>
        {rewards.map((reward, index) => (
          <li key={index}>{reward}</li>
        ))}
      </ul>
    </div>
  );
}

export default App;
